{
    // http://eslint.org/docs/rules/

    "ecmaFeatures": {
        // enable arrow functions
        "arrowFunctions": true,
        // enable binary literals
        "binaryLiterals": true,
        // enable let and const (aka block bindings)
        "blockBindings": true,
        // enable classes
        "classes": true,
        // enable default function parameters
        "defaultParams": true,
        // enable destructuring
        "destructuring": true,
        // enable for-of loops
        "forOf": true,
        // enable generators
        "generators": true,
        // enable modules and global strict mode
        "modules": true,
        // enable computed object literal property names
        "objectLiteralComputedProperties": true,
        // enable duplicate object literal properties in strict mode
        "objectLiteralDuplicateProperties": false,
        // enable object literal shorthand methods
        "objectLiteralShorthandMethods": true,
        // enable object literal shorthand properties
        "objectLiteralShorthandProperties": true,
        // enable octal literals
        "octalLiterals": true,
        // enable the regular expression u flag
        "regexUFlag": false,
        // enable the regular expression y flag
        "regexYFlag": false,
        // enable the rest parameters
        "restParams": true,
        // enable the spread operator
        "spread": true,
        // enable super references inside of functions
        "superInFunctions": true,
        // enable template strings
        "templateStrings": true,
        // enable code point escapes
        "unicodeCodePointEscapes": true,
        // allow return statements in the global scope
        "globalReturn": false,
        // enable JSX
        "jsx": true
    },

    "env": {
        // browser global variables.
        "browser": true,
        // Node.js global variables and Node.js-specific rules.
        "node": true,
        // defines require() and define() as global variables as per the amd spec.
        "amd": false,
        // adds all of the Mocha testing global variables.
        "mocha": false,
        // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
        "jasmine": false,
        // phantomjs global variables.
        "phantomjs": false,
        // jquery global variables.
        "jquery": false,
        // prototypejs global variables.
        "prototypejs": false,
        // shelljs global variables.
        "shelljs": false,
        // enable all ECMAScript 6 features except for modules.
        "es6": true,
    },

    "globals": {},

    "plugins": [
        "react"
    ],

    "rules": {
        ////////// Possible Errors //////////

        // disallow trailing commas in object literals
        "no-comma-dangle": 2,
        // disallow assignment in conditional expressions
        "no-cond-assign": 2,
        // disallow use of console (off by default in the node environment)
        "no-console": 0,
        // disallow use of constant expressions in conditions
        "no-constant-condition": 2,
        // disallow control characters in regular expressions
        "no-control-regex": 2,
        // disallow use of debugger
        "no-debugger": 0,
        // disallow duplicate keys when creating object literals
        "no-dupe-keys": 2,
        // disallow empty statements
        "no-empty": 2,
        // disallow the use of empty character classes in regular expressions
        "no-empty-class": 0,
        // disallow assigning to the exception in a catch block
        "no-ex-assign": 2,
        // disallow double-negation boolean casts in a boolean context
        "no-extra-boolean-cast": 0,
        // disallow unnecessary parentheses (off by default)
        "no-extra-parens": 0,
        // disallow unnecessary semicolons
        "no-extra-semi": 0,
        // disallow overwriting functions written as function declarations
        "no-func-assign": 1,
        // disallow function or variable declarations in nested blocks
        "no-inner-declarations": 0,
        // disallow invalid regular expression strings in the RegExp constructor
        "no-invalid-regexp": 2,
        // disallow irregular whitespace outside of strings and comments
        "no-irregular-whitespace": 1,
        // disallow negation of the left operand of an in expression
        "no-negated-in-lhs": 1,
        // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-obj-calls": 1,
        // disallow multiple spaces in a regular expression literal
        "no-regex-spaces": 1,
        // disallow reserved words being used as object literal keys (off by default)
        "no-reserved-keys": 0,
        // disallow sparse arrays
        "no-sparse-arrays": 2,
        // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unreachable": 2,
        // disallow comparisons with the value NaN
        "use-isnan": 2,
        // Ensure JSDoc comments are valid (off by default)
        "valid-jsdoc": 0,
        // Ensure that the results of typeof are compared against a valid string
        "valid-typeof": 2,


        ////////// Best Practices //////////

        // treat var statements as if they were block scoped (off by default)
        "block-scoped-var": 0,
        // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "complexity": 0,
        // require return statements to either always or never specify values
        "consistent-return": 0,
        // specify curly brace conventions for all control statements
        "curly": 2,
        // require default case in switch statements (off by default)
        "default-case": 0,
        // encourages use of dot notation whenever possible
        "dot-notation": 0,
        // require the use of === and !==
        "eqeqeq": 2,
        // make sure for-in loops have an if statement (off by default)
        "guard-for-in": 0,
        // disallow the use of alert, confirm, and prompt
        "no-alert": 0,
        // disallow use of arguments.caller or arguments.callee
        "no-caller": 2,
        // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-div-regex": 1,
        // disallow else after a return in an if (off by default)
        "no-else-return": 0,
        // disallow use of labels for anything other then loops and switches
        "no-empty-label": 2,
        // disallow comparisons to null without a type-checking operator (off by default)
        "no-eq-null": 0,
        // disallow use of eval()
        "no-eval": 1,
        // disallow adding to native types
        "no-extend-native": 0,
        // disallow unnecessary function binding
        "no-extra-bind": 0,
        // disallow fallthrough of case statements
        "no-fallthrough": 0,
        // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-floating-decimal": 0,
        // disallow use of eval()-like methods
        "no-implied-eval": 1,
        // disallow usage of __iterator__ property
        "no-iterator": 0,
        // disallow use of labeled statements
        "no-labels": 2,
        // disallow unnecessary nested blocks
        "no-lone-blocks": 1,
        // disallow creation of functions within loops
        "no-loop-func": 2,
        // disallow use of multiple spaces
        "no-multi-spaces": 1,
        // disallow use of multiline strings
        "no-multi-str": 0,
        // disallow reassignments of native objects
        "no-native-reassign": 2,
        // disallow use of new operator when not part of the assignment or comparison
        "no-new": 0,
        // disallow use of new operator for Function object
        "no-new-func": 1,
        // disallows creating new instances of String, Number, and Boolean
        "no-new-wrappers": 1,
        // disallow use of octal literals
        "no-octal": 0,
        // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-octal-escape": 0,
        // disallow use of process.env (off by default)
        "no-process-env": 0,
        // disallow usage of __proto__ property
        "no-proto": 0,
        // disallow declaring the same variable more then once
        "no-redeclare": 0,
        // disallow use of assignment in return statement
        "no-return-assign": 0,
        // disallow use of javascript: urls.
        "no-script-url": 1,
        // disallow comparisons where both sides are exactly the same (off by default)
        "no-self-compare": 2,
        // disallow use of comma operator
        "no-sequences": 0,
        // disallow usage of expressions in statement position
        "no-unused-expressions": 1,
        // disallow use of void operator (off by default)
        "no-void": 0,
        // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-warning-comments": 0,
        // disallow use of the with statement
        "no-with": 2,
        // require use of the second argument for parseInt() (off by default)
        "radix": 2,
        // requires to declare all vars on top of their containing scope (off by default)
        "vars-on-top": 0,
        // require immediate function invocation to be wrapped in parentheses (off by default)
        "wrap-iife": 2,
        // require or disallow Yoda conditions
        "yoda": 0,


        ////////// Strict Mode //////////

        // (deprecated) require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
        "global-strict": 0,
        // (deprecated) disallow unnecessary use of "use strict"; when already in strict mode
        "no-extra-strict": 0,
        // controls location of Use Strict Directives
        "strict": 0,


        ////////// Variables //////////

        // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-catch-shadow": 0,
        // disallow deletion of variables
        "no-delete-var": 2,
        // disallow labels that share a name with a variable
        "no-label-var": 2,
        // disallow declaration of variables already declared in the outer scope
        "no-shadow": 1,
        // disallow shadowing of names such as arguments
        "no-shadow-restricted-names": 2,
        // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef": 2,
        // disallow use of undefined when initializing variables
        "no-undef-init": 2,
        // disallow use of undefined variable (off by default)
        "no-undefined": 0,
        // disallow declaration of variables that are not used in the code
        "no-unused-vars": 1,
        // disallow use of variables before they are defined
        "no-use-before-define": 2,


        ////////// Node.js //////////

        // enforces error handling in callbacks (off by default) (on by default in the node environment)
        "handle-callback-err": 1,
        // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
        "no-mixed-requires": 0,
        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
        "no-new-require": 0,
        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
        "no-path-concat": 1,
        // disallow process.exit() (on by default in the node environment)
        "no-process-exit": 0,
        // restrict usage of specified node modules (off by default)
        "no-restricted-modules": 1,
        // disallow use of synchronous methods (off by default)
        "no-sync": 0,


        ////////// Stylistic Issues //////////

        // enforce one true brace style (off by default)
        "brace-style": [1, "stroustrup"],
        // require camel case names
        "camelcase": 0,
        // enforce spacing before and after comma
        "comma-spacing": [1, {"before": false, "after": true}],
        // enforce one true comma style (off by default)
        "comma-style": [1, "last"],
        // enforces consistent naming when capturing the current execution context (off by default)
        "consistent-this": 0,
        // enforce newline at the end of file, with no multiple empty lines
        "eol-last": 1,
        // require function expressions to have a name (off by default)
        "func-names": 0,
        // enforces use of function declarations or expressions (off by default)
        "func-style": 0,
        // this option sets a specific tab width for your code (off by default)
        "indent": [1, "tab"],
        // enforces spacing between keys and values in object literal properties
        "key-spacing": [1, {"beforeColon": false, "afterColon": true}],
        // specify the maximum depth callbacks can be nested (off by default)
        "max-nested-callbacks": 0,
        // require a capital letter for constructors
        "new-cap": 1,
        // disallow the omission of parentheses when invoking a constructor with no arguments
        "new-parens": 1,
        // disallow use of the Array constructor
        "no-array-constructor": 1,
        // disallow comments inline after code (off by default)
        "no-inline-comments": 1,
        // disallow if as the only statement in an else block (off by default)
        "no-lonely-if": 1,
        // disallow mixed spaces and tabs for indentation
        "no-mixed-spaces-and-tabs": 1,
        // disallow multiple empty lines (off by default)
        "no-multiple-empty-lines": 0,
        // disallow nested ternary expressions (off by default)
        "no-nested-ternary": 0,
        // disallow use of the Object constructor
        "no-new-object": 1,
        // disallow space before semicolon
        "no-space-before-semi": 1,
        // disallow space between function identifier and application
        "no-spaced-func": 1,
        // disallow the use of ternary operators (off by default)
        "no-ternary": 0,
        // disallow trailing whitespace at the end of lines
        "no-trailing-spaces": 1,
        // disallow dangling underscores in identifiers
        "no-underscore-dangle": 0,
        // disallow the use of Boolean literals in conditional expressions (off by default)
        "no-unneeded-ternary": 1,
        // disallow wrapping of non-IIFE statements in parens
        "no-wrap-func": 0,
        // require or disallow padding inside curly braces (off by default)
        "object-curly-spacing": [1, "always"],
        // allow just one var statement per function (off by default)
        "one-var": 0,
        // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-assignment": 0,
        // enforce operators to be placed before or after line breaks (off by default)
        "operator-linebreak": [1, "after"],
        // enforce padding within blocks (off by default)
        "padded-blocks": 0,
        // require quotes around object literal property names (off by default)
        "quote-props": [1, "as-needed"],
        // specify whether double or single quotes should be used
        "quotes": [1, "single", "avoid-escape"],
        // enforce spacing before and after semicolons
        "semi-spacing": [1, {"before": false, "after": true}],
        // require or disallow use of semicolons instead of ASI
        "semi": [1, "always"],
        // sort variables within the same declaration block (off by default)
        "sort-vars": 0,
        // require a space after certain keywords (off by default)
        "space-after-keywords": [1, "always"],
        // require or disallow space before blocks (off by default)
        "space-before-blocks": [1, "always"],
        // require or disallow space before function opening parenthesis (off by default)
        "space-before-function-paren": [1, "always"],
        // require or disallow spaces inside parentheses (off by default)
        "space-in-parens": 0,
        // require spaces around operators
        "space-infix-ops": [1, {"int32Hint": true}],
        // require a space after return, throw, and case
        "space-return-throw-case": 1,
        // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "space-unary-ops": [1, { "words": true, "nonwords": false }],
        // in a line comment (off by default)
        "spaced-comment": [1, "always"],       // require or disallow a space immediately following the
        // require regex literals to be wrapped in parentheses (off by default)
        "wrap-regex": 1,


        ////////// ECMAScript 6 //////////

        // verify super() callings in constructors (off by default)
        "constructor-super": 2,
        // enforce the spacing around the * in generator functions (off by default)
        "generator-star-spacing": [1, {"before": false, "after": true}],
        // disallow to use this/super before super() calling in constructors. (off by default)
        "no-this-before-super": 2,
        // require let or const instead of var (off by default)
        "no-var": 0,
        // require method and property shorthand syntax for object literals (off by default)
        "object-shorthand": 0,
        // suggest using of const declaration for variables that are never modified after declared (off by default)
        "prefer-const": 1,


        ////////// Legacy //////////

        // specify the maximum depth that blocks can be nested (off by default)
        "max-depth": 0,
        // specify the maximum length of a line in your program (off by default)
        "max-len": 0,
        // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-params": 0,
        // specify the maximum number of statement allowed in a function (off by default)
        "max-statements": 0,
        // disallow use of bitwise operators (off by default)
        "no-bitwise": 0,
        // disallow use of unary operators, ++ and -- (off by default)
        "no-plusplus": 0,


        ////////// React //////////

        // Prevent missing displayName in a React component definition
        "react/display-name": 1,
        // Enforce boolean attributes notation in JSX
        "react/jsx-boolean-value": 1,
        // Enforce or disallow spaces inside of curly braces in JSX attributes
        "react/jsx-curly-spacing": [1, "always"],
        // Disallow undeclared variables in JSX
        "react/jsx-no-undef": 1,
        // Enforce quote style for JSX attributes
        "react/jsx-quotes": 1,
        // Enforce propTypes declarations alphabetical sorting
        "react/jsx-sort-prop-types": 1,
        // Enforce props alphabetical sorting
        "react/jsx-sort-props": 0,
        // Prevent React to be incorrectly marked as unused
        "react/jsx-uses-react": 1,
        // Prevent variables used in JSX to be incorrectly marked as unused
        "react/jsx-uses-vars": 1,
        // Prevent usage of dangerous JSX properties
        "react/no-danger": 1,
        // Prevent usage of setState in componentDidMount
        "react/no-did-mount-set-state": 1,
        // Prevent usage of setState in componentDidUpdate
        "react/no-did-update-set-state": 1,
        // Prevent multiple component definition per file
        "react/no-multi-comp": 1,
        // Prevent usage of unknown DOM property
        "react/no-unknown-property": 1,
        // Prevent missing props validation in a React component definition
        "react/prop-types": 1,
        // Prevent missing React when using JSX
        "react/react-in-jsx-scope": 1,
        // Restrict file extensions that may be required
        "react/require-extension": 1,
        // Prevent extra closing tags for components without children
        "react/self-closing-comp": 1,
        // Enforce component methods order
        "react/sort-comp": 1,
        // Prevent missing parentheses around multilines JSX
        "react/wrap-multilines": 1
    }
}
